// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["linux-musl-openssl-3.0.x", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  username        String    @unique
  password        String
  role            Role      @default(USER)
  isEmailVerified Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  Token           Token[]
  college         College?  @relation(fields: [collegeId], references: [id])
  collegeId       String?
  profilePicture  String?
  Post            Post[]
  Like            Like[]
  Comment         Comment[]
  Vote            Vote[]
}

model Token {
  id        Int       @id @default(autoincrement())
  token     String
  type      TokenType
  expiresAt DateTime
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
}

enum Role {
  USER
  ADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

model College {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
  Post      Post[]
}

enum PostType {
  POST
  POLL
}

model Post {
  id        String    @id @default(uuid())
  title     String?   @db.Char(80)
  content   String
  PostType  PostType
  authorId  String
  Author    User      @relation(fields: [authorId], references: [id])
  collegeId String?
  College   College?  @relation(fields: [collegeId], references: [id])
  media     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isEdited  Boolean   @default(false)
  isDeleted Boolean   @default(false)
  options   Option[]
  likes     Like[]
  comments  Comment[]
}

model Like {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  Post      Post     @relation(fields: [postId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, userId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  postId    String
  userId    String
  Post      Post     @relation(fields: [postId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
  isEdited  Boolean  @default(false)
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Option {
  id        String   @id @default(uuid())
  content   String   @db.Char(100)
  media     String?
  postId    String
  Post      Post     @relation(fields: [postId], references: [id])
  votes     Vote[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, content, media])
}

model Vote {
  id        String   @id @default(uuid())
  userId    String
  optionId  String
  Option    Option   @relation(fields: [optionId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, optionId])
}

model Chat{
  id        String   @id @default(uuid())
  to        String
  from      String
  message   String
  createdAt DateTime @default(now())

  @@unique([id])
}